---
import PrimaryButton from "./ui/PrimaryButton.astro";
import SecondaryButton from "./ui/SecondaryButton.astro";
import OrderOnlineBtn from "./ui/OrderOnlineBtn.astro";
import { cn } from "../utils/cn";

const { content } = Astro.props;
---

<header id="header" class="relative shadow-lg z-50">
  <div class="fixed top-0 w-full">
    <!-- banner -->
    {
      content?.banner ? (
        <div
          id="headBanner"
          class="z-[9999999999] relative isolate flex items-center gap-x-6 overflow-hidden px-6 py-2.5 sm:px-3.5 sm:before:flex-1"
          style={`background-color: ${content?.primaryColor};`}
        >
          <div
            style={`color:${content.primaryColorScheme === "dark" ? "#ffffff" : "#000000"}`}
          >
            {content?.banner?.text?.map(
              (item: { boldText: string; text: string; smText: string }) => {
                return (
                  <span>
                    {item?.boldText && (
                      <span class="font-semibold">{item.boldText}</span>
                    )}
                    {item?.text && <span class="text-sm">{item.text}</span>}
                    {item?.smText && <span class="text-xs">{item.smText}</span>}
                  </span>
                );
              }
            )}
          </div>
          <div id="bannerCloseIcon" class="flex flex-1 justify-end">
            <button
              type="button"
              class="-m-3 p-3 focus-visible:outline-offset-[-4px]"
            >
              <span class="sr-only">Dismiss</span>
              <svg
                class="h-5 w-5 text-gray-900"
                viewBox="0 0 20 20"
                fill={
                  content.primaryColorScheme === "dark" ? "#ffffff" : "#000000"
                }
                aria-hidden="true"
              >
                <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
              </svg>
            </button>
          </div>
        </div>
      ) : (
        ""
      )
    }
    <!-- end of banner -->
    <span
      class="absolute -z-10 w-full inset-0 top-0 left-0"
      style={`background-color: ${content?.header?.bgColor}; opacity:${content?.header?.bgOpacity};`}
    ></span>
    <nav
      class="mx-auto flex max-w-7xl items-center justify-between gap-x-2 sm:gap-x-6 px-6 py-3 lg:px-8"
      aria-label="Global"
    >
      <div class="cursor-pointer truncate">
        <a href="/" class="flex items-center justify-center -m-1.5 p-1.5">
          <span class="sr-only">{content?.header?.title + "Logo"}</span>
          <img
            class={`hidden sm:block h-24 w-auto mr-3`}
            src={`/${content?.logo}`}
            alt={content?.title + " Logo"}
            style={`height:${content?.header?.logoSize}px`}
          />
          <img
            class={`block sm:hidden mx-2`}
            src={`/${content?.logo}`}
            alt={content?.title + " Logo"}
            style={`height:${content?.header?.logoSizeOnMobile ? content?.header?.logoSizeOnMobile : "40"}px`}
          />
          {
            content?.header?.textAfterLogo ? (
              <div
                class={cn(
                  "flex-1 truncate",
                  content?.header?.showTextAfterLogoOnMobile
                    ? ""
                    : "hidden sm:block"
                )}
                style={`color:${content?.header?.textAfterLogo?.color};font-size:${content?.header?.textAfterLogo?.size}px`}
              >
                {content?.header?.textAfterLogo?.text}
              </div>
            ) : (
              ""
            )
          }
        </a>
      </div>
      <div
        class="cursor-pointer hidden lg:flex lg:flex-0 lg:gap-x-12 grow justify-center"
        style={`color:${content?.header?.menuTextColor}`}
      >
        {
          content?.header?.menu &&
            content?.header?.menu?.map(
              (
                item: { link: string | URL | null | undefined; text: unknown },
                index: any
              ) => (
                <Fragment key={index}>
                  <a
                    href={item?.link}
                    class="cursor-pointer hover:scale-125 ease-in-out transition-transform duration-300 text-sm font-semibold leading-6"
                  >
                    {item?.text}
                  </a>
                </Fragment>
              )
            )
        }
      </div>
      <div
        class="cursor-pointer flex flex-1 items-center justify-end gap-x-2 sm:gap-x-6"
      >
        {
          content?.header?.addOrderOnlineBtn ? (
            <OrderOnlineBtn
              content={content}
              text={
                content?.header?.orderOnlineBtnInsteadText || "Order Online"
              }
              dataGlfCuid={content?.cuid}
              dataGlfRuid={content?.ruid}
            />
          ) : (
            ""
          )
        }
        {
          content?.header?.addTableReservationBtn && (
            <OrderOnlineBtn
              content={content}
              text={
                content?.header?.orderOnlineBtnInsteadText ||
                "Table Reservation"
              }
              dataGlfCuid={content?.cuid}
              dataGlfRuid={content?.ruid}
              isReservation
            />
          )
        }
        {
          content?.header?.otherBtnInsteadText ? (
            <PrimaryButton
              content={content}
              text={content?.header?.otherBtnInsteadText}
              href={`${content?.header?.otherBtnHref}`}
            />
          ) : (
            ""
          )
        }
        {
          content?.header?.otherBtn1InsteadText ? (
            <PrimaryButton
              content={content}
              text={content?.header?.otherBtn1InsteadText}
              href={`${content?.header?.otherBtn1Href}`}
            />
          ) : (
            ""
          )
        }
        {
          content?.header?.otherBtn2InsteadText ? (
            <SecondaryButton
              content={content}
              text={content?.header?.otherBtn2InsteadText}
              href={`${content?.header?.otherBtn2Href}`}
            />
          ) : (
            ""
          )
        }

        {
          content?.header?.addTelBtn ? (
            <a
              class="flex items-center gap-2 cursor-pointer hover:scale-105"
              style={`color:${content?.header?.telTextColor}`}
              href={`tel:${content?.trackingNum ? content?.trackingNum : content?.tel}`}
              id="headerTelBtn"
            >
              <span class="sr-only">Call Us</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="1em"
                height="1em"
                viewBox="0 0 24 24"
                class="w-7 h-7 sm:w-5 sm:h-5"
              >
                <path
                  fill="currentColor"
                  d="M6.62 10.79c1.44 2.83 3.76 5.15 6.59 6.59l2.2-2.2c.28-.28.67-.36 1.02-.25c1.12.37 2.32.57 3.57.57a1 1 0 0 1 1 1V20a1 1 0 0 1-1 1A17 17 0 0 1 3 4a1 1 0 0 1 1-1h3.5a1 1 0 0 1 1 1c0 1.25.2 2.45.57 3.57c.11.35.03.74-.25 1.02z"
                />
              </svg>
              <span class="hidden sm:block whitespace-nowrap">
                {content?.tel}
              </span>
            </a>
          ) : (
            ""
          )
        }
      </div>
      <div id="openMainMenu" class="flex lg:hidden">
        <button
          type="button"
          class=`cursor-pointer -m-2.5 inline-flex items-center justify-center rounded-md p-2.5`
          style={`color:${content?.header?.menuTextColor}`}
        >
          <span class="sr-only">Open main menu</span>
          <svg
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
          </svg>
        </button>
      </div>
    </nav>
    <!-- Mobile menu  -->
    <div
      id="mobileMenu"
      class="hidden fixed inset-0 z-10 items-center justify-center bg-gray-900 bg-opacity-90"
    >
      <div
        class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10"
      >
        <div class="flex justify-end items-between gap-x-6">
          <!-- <a href="/" class="-m-1.5 p-1.5">
            <span class="sr-only">{content?.header?.title + " Logo"}</span>
            <img
              class="h-12 w-auto"
              src={`/${content?.logo}`}
            alt={content?.title + " Logo"}
            />
          </a> -->
          <div class="flex items-center gap-x-4">
            {
              content?.header?.addOrderOnlineBtn ? (
                <OrderOnlineBtn
                  content={content}
                  text={
                    content?.header?.orderOnlineBtnInsteadText || "Order Online"
                  }
                  dataGlfCuid={content?.cuid}
                  dataGlfRuid={content?.ruid}
                />
              ) : (
                ""
              )
            }
            {
              content?.header?.addTableReservationBtn && (
                <OrderOnlineBtn
                  content={content}
                  text={
                    content?.header?.orderOnlineBtnInsteadText ||
                    "Table Reservation"
                  }
                  dataGlfCuid={content?.cuid}
                  dataGlfRuid={content?.ruid}
                  isReservation
                />
              )
            }
            {
              content?.header?.otherBtnInsteadText ? (
                <PrimaryButton
                  content={content}
                  text={content?.header?.otherBtnInsteadText}
                  href={`${content?.header?.otherBtnHref}`}
                />
              ) : (
                ""
              )
            }
            {
              content?.header?.otherBtn1InsteadText ? (
                <PrimaryButton
                  content={content}
                  text={content?.header?.otherBtn1InsteadText}
                  href={`${content?.header?.otherBtn1Href}`}
                />
              ) : (
                ""
              )
            }
            {
              content?.header?.otherBtn2InsteadText ? (
                <SecondaryButton
                  content={content}
                  text={content?.header?.otherBtn2InsteadText}
                  href={`${content?.header?.otherBtn2Href}`}
                />
              ) : (
                ""
              )
            }

            <button
              id="closeMenu"
              type="button"
              class="cursor-pointer rounded-md p-2.5 text-gray-700"
            >
              <span class="sr-only">Close menu</span>
              <svg
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="1.5"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        <div class="mt-6 flow-root">
          <div class="-my-6 divide-y divide-gray-500/10">
            <div class="space-y-2 py-6">
              {
                content?.header?.menu?.map(
                  (
                    item: {
                      link: string | URL | null | undefined;
                      text: unknown;
                    },
                    index: any
                  ) => (
                    <Fragment key={index}>
                      <a
                        href={item?.link}
                        class="menuItem -mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"
                      >
                        {item?.text}
                      </a>
                    </Fragment>
                  )
                )
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document
    ?.getElementById("openMainMenu")
    ?.addEventListener("click", function () {
      document?.getElementById("mobileMenu")?.classList?.remove("hidden");
    });

  document?.getElementById("closeMenu")?.addEventListener("click", function () {
    document?.getElementById("mobileMenu")?.classList.add("hidden");
  });

  const menuItems = document.querySelectorAll(".menuItem");

  menuItems.forEach((item) => {
    item.addEventListener("click", function () {
      setTimeout(() => {
        document.getElementById("mobileMenu")?.classList.add("hidden");
      }, 300); //delay
    });
  });

  document
    ?.getElementById("bannerCloseIcon")
    ?.addEventListener("click", function () {
      document?.getElementById("headBanner")?.classList.add("hidden");
    });
</script>
