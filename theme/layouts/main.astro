---
import Header from "../components/Header.astro";
import Feature from "../components/Feature.astro";
import TextBlock from "../components/TextBlock.astro";
import Video from "../components/Video.astro";
import Footer from "../components/Footer.astro";
import Gallery from "../components/Gallery.astro";
import GotoTopButton from "../components/ui/GotoTopButton.astro";
import Modal from "../components/Modal.astro";
import Map from "../components/Map.astro";
import GoogleForm from "../components/GoogleForm.astro";
import "../style/global.css";

type Address = {
  streetAddress: string;
  addressLocality: string;
  addressRegion: string;
  postalCode: string;
  addressCountry: string;
};

type Review = {
  ratingValue: string;
  bestRating: string;
  authorName: string;
};

type Geo = {
  latitude: number;
  longitude: number;
};

type OpeningHours = {
  dayOfWeek: string | string[];
  opens: string;
  closes: string;
};

type RestaurantStructuredDataInput = {
  name: string;
  images: string[];
  address: Address;
  review: Review;
  geo: Geo;
  url: string;
  telephone: string;
  servesCuisine: string;
  priceRange: string;
  openingHours: OpeningHours[];
  menu: string;
};

const { content } = Astro.props;
const tag = content?.tag;
const isModal = content?.sections?.some(
  (item: { type: string | string[] }) =>
    item?.type && item.type.includes("modal")
);

// structured data
const generateRestaurantStructuredData = ({
  name,
  images,
  address,
  review,
  geo,
  url,
  telephone,
  servesCuisine,
  priceRange,
  openingHours,
  menu,
}:RestaurantStructuredDataInput) => {
  return JSON.stringify({
    "@context": "https://schema.org",
    "@type": "Restaurant",
    name: name,
    image: images,
    address: {
      "@type": "PostalAddress",
      streetAddress: address?.streetAddress,
      addressLocality: address?.addressLocality,
      addressRegion: address?.addressRegion,
      postalCode: address?.postalCode,
      addressCountry: address?.addressCountry,
    },
    review: {
      "@type": "Review",
      reviewRating: {
        "@type": "Rating",
        ratingValue: review?.ratingValue,
        bestRating: review?.bestRating,
      },
      author: {
        "@type": "Person",
        name: review?.authorName,
      },
    },
    geo: {
      "@type": "GeoCoordinates",
      latitude: geo?.latitude,
      longitude: geo?.longitude,
    },
    url: url,
    telephone: telephone,
    servesCuisine: servesCuisine,
    priceRange: priceRange,
    openingHoursSpecification: openingHours.map((hours: { dayOfWeek: any; opens: any; closes: any; }) => ({
      "@type": "OpeningHoursSpecification",
      dayOfWeek: hours?.dayOfWeek,
      opens: hours?.opens,
      closes: hours?.closes,
    })),
    menu: menu,
  });
};

const structuredData = generateRestaurantStructuredData({
  name: content?.seo?.name,
  images: content?.seo?.images,
  address: content?.seo?.address,
  review: content?.seo?.review,
  geo: content?.seo?.geo,
  url: content?.seo?.url,
  telephone: content?.seo?.telephone,
  servesCuisine: content?.seo?.servesCuisine,
  priceRange: content?.seo?.priceRange,
  openingHours: content?.seo?.openingHours?.length ? content?.seo.openingHours : undefined,
  menu: content?.seo?.menu,
});
---

<html lang={content?.seo?.locale}>
  <head>
    <!-- Google Tag Manager -->
     {tag?
    <script is:inline define:vars={{ tag }}>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", tag);
    </script>:null}
    <!-- End Google Tag Manager -->
    <!-- modal -->
     {isModal?
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("promoModal");
        const overlay = document.getElementById("overlay");
        const closeModal = document.getElementById("closeModal");
        const promoButton = document.getElementById("promoButton");

        // Check the modal status in localStorage
        const modalStatus = localStorage.getItem("promoModalShown");
        const now = new Date().getTime();

        if (!modalStatus || now - parseInt(modalStatus) > 30 * 60 * 1000) {
          // Show the modal and overlay after a 3-second delay
          setTimeout(() => {
            modal?.classList.add("show");
            overlay?.classList.add("show");
          }, 3000);
        }

        function closeModalAndRecord() {
          modal?.classList.remove("show");
          overlay?.classList.remove("show");
          localStorage.setItem(
            "promoModalShown",
            new Date().getTime().toString()
          );
        }

        closeModal?.addEventListener("click", closeModalAndRecord);
        overlay?.addEventListener("click", closeModalAndRecord);

        // stop bounce
        promoButton?.addEventListener("mouseover", () => {
          promoButton?.classList.remove("bounce");
        });

        // recover bounce
        promoButton?.addEventListener("mouseout", () => {
          promoButton?.classList.add("bounce");
        });
      });
    </script>:null}
    <!-- end of modal -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    {
      content?.seo?.metaTitle ? (
        <title>{content?.seo?.metaTitle}</title>
      ) : (
        <title>{content?.title}</title>
      )
    }
    {
      content?.seo?.metaDescription ? (
        <meta name="description" content={content?.seo?.metaDescription} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.keywords ? (
        <meta name="keywords" content={content?.seo?.keywords} />
      ) : (
        ""
      )
    }
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Best Food Today" />

    <!-- Open Graph Meta Tags -->
    {
      content?.title ? (
        <meta property="og:title" content={content?.seo?.metaTitle?content?.seo?.metaTitle:content?.title} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.metaDescription ? (
        <meta property="og:description" content={content?.seo?.metaDescription} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.img ? (
        <meta property="og:image" content={content?.seo?.img} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.thisPageUrl ? (
        <meta property="og:url" content={content?.seo?.thisPageUrl} />
      ) : (
        ""
      )
    }
    <meta property="og:type" content="restaurant" />
    {content?.seo?.locale?
    <meta property="og:locale" content={content?.seo?.locale}/>:""}

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    {
      content?.title ? (
        <meta name="twitter:title" content={content?.title} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.metaDescription ? (
        <meta
          name="twitter:description"
          content={content?.seo?.metaDescription}
        />
      ) : (
        ""
      )
    }
    {
      content?.seo?.img ? (
        <meta name="twitter:image" content={content?.seo?.img} />
      ) : (
        ""
      )
    }
    <!-- structured data -->
    {structuredData && (
      <script type="application/ld+json" set:html={structuredData}></script>
    )}
        <!-- end of structured data -->
  </head>
  <body>
    <!-- Google Tag Manager (noscript) -->
     {tag?
    <noscript
      ><iframe
        src={`https://www.googletagmanager.com/ns.html?id=${content.tag}`}
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript>
        :null}

    <!-- End Google Tag Manager (noscript) -->

    {content?.header && <Header content={content} />}

    {
      content?.sections?.map((section: { type: string }) => {
        if (section?.type === "feature" || section?.type === "hero") {
          return <Feature content={content} section={section} />;
        } else if (section?.type === "video") {
          return <Video content={content} section={section} />;
        } else if (section?.type === "gallery") {
          return <Gallery section={section} />;
        } else if (section?.type === "modal") {
          return <Modal content={content} section={section} />;
        } else if (section?.type === "map") {
          return <Map content={content} section={section} />;
        } else if (section?.type === "form") {
          return <GoogleForm content={content} section={section} />;
        } else if (section?.type === "textBlock") {
          return <TextBlock content={content} section={section} />;
        }
      })
    }
    {content?.footer && <Footer content={content} />}

    <GotoTopButton content={content} />
    <slot />


    <!-- GLF page with an embedded order iframe popup.
    <script
      is:inline
      src="https://www.fbgcdn.com/embedder/js/ewm2.js"
      defer
      async></script> -->
  </body>
</html>
