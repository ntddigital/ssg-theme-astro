---
import Header from "../components/Header.astro";
import Feature from "../components/Feature.astro";
import TextBlock from "../components/TextBlock.astro";
import Video from "../components/Video.astro";
import Footer from "../components/Footer.astro";
import Gallery from "../components/Gallery.astro";
import GotoTopButton from "../components/ui/GotoTopButton.astro";
import Modal from "../components/Modal.astro";
import Map from "../components/Map.astro";
import GoogleForm from "../components/GoogleForm.astro";
import "../style/global.css";

// Define the input types
type Address = {
  streetAddress: string;
  addressLocality: string;
  addressRegion: string;
  postalCode: string;
  addressCountry: string;
};

type Review = {
  ratingValue: string;
  bestRating: string;
  authorName: string;
  reviewType: string;
};

type Geo = {
  latitude: number;
  longitude: number;
};

type OpeningHours = {
  dayOfWeek: string | string[];
  opens: string;
  closes: string;
};

type RestaurantStructuredDataInput = {
  name?: string;
  images?: string[];
  address?: Address;
  review?: Review;
  reviewType?: string;
  geo?: Geo;
  url?: string;
  telephone?: string;
  servesCuisine?: string[];
  priceRange?: string;
  openingHours?: OpeningHours[];
  menu?: string;
  acceptsReservations?: boolean | string;
  hasMenu?: string;
  starRating?: {
    ratingValue: string;
    bestRating: string;
    author: string;
    authorType:string;
  };
  currenciesAccepted?: string;
  paymentAccepted?: string;
  hasMenuSection?: {
    name: string;
    description:string;
    image:string;
    hasMenuItem: {
      name: string;
      description: string;
      image:string;
      price: string;
      suitableForDiet:string;
    }[];
  }[];
};



const { content } = Astro.props;
const tag = content?.tag;
const isModal = content?.sections?.some(
  (item: { type: string | string[] }) =>
    item?.type && item.type.includes("modal")
);

// structured data

const generateStructuredData = ({
  name,
  images,
  paymentAccepted,
  priceRange,
  address,
  review,
  geo,
  servesCuisine,
  telephone,
  acceptsReservations,
  starRating,
  openingHours,
  hasMenuSection
}: RestaurantStructuredDataInput) => {
  const structuredData: any = {
    "@context": "https://schema.org",
    "@type": "Restaurant"
  };

  // Conditionally add properties
  if (name) structuredData.name = name;
  if (images && images.length > 0 && images[0]) structuredData.image = images.filter(image => image);
  if (paymentAccepted) structuredData.paymentAccepted = paymentAccepted;
  if (priceRange) structuredData.priceRange = priceRange;
  if (address) {
    structuredData.address = {
      "@type": "PostalAddress",
      ...(address.streetAddress && { streetAddress: address.streetAddress }),
      ...(address.addressLocality && { addressLocality: address.addressLocality }),
      ...(address.addressRegion && { addressRegion: address.addressRegion }),
      ...(address.postalCode && { postalCode: address.postalCode }),
      ...(address.addressCountry && { addressCountry: address.addressCountry })
    };
  }
  if (review && review.ratingValue && review.bestRating && review.authorName) {
    structuredData.review = {
      "@type": "Review",
      reviewRating: {
        "@type": "Rating",
        ratingValue: review.ratingValue,
        bestRating: review.bestRating
      },
      author: {
        "@type": review.reviewType,
        name: review.authorName
      }
    };
  }
  if (geo && geo.latitude !== null && geo.longitude !== null) {
    structuredData.geo = {
      "@type": "GeoCoordinates",
      latitude: geo.latitude,
      longitude: geo.longitude
    };
  }
  if (servesCuisine) structuredData.servesCuisine = servesCuisine;
  if (telephone) structuredData.telephone = telephone;
  if (acceptsReservations ) {
    structuredData.acceptsReservations = acceptsReservations;
  }
  if (starRating && starRating.ratingValue && starRating.bestRating && starRating.author) {
    structuredData.starRating = {
      "@type": "Rating",
      ratingValue: starRating.ratingValue,
      bestRating: starRating.bestRating,
      author: {
        "@type": starRating.authorType,
        name: starRating.author
      }
    };
  }
   if (openingHours && openingHours.length > 0) {
    structuredData.openingHoursSpecification = openingHours.map((hours) => ({
      "@type": "OpeningHoursSpecification",
      dayOfWeek: Array.isArray(hours.dayOfWeek) ? hours.dayOfWeek : [hours.dayOfWeek],
      opens: hours.opens,
      closes: hours.closes
    }));
  }
if (hasMenuSection && hasMenuSection.length > 0) {
  structuredData.hasMenu = {
    "@type": "Menu",
    hasMenuSection: hasMenuSection
      .filter(section => section.name && section.hasMenuItem && section.hasMenuItem.length > 0)
      .map(section => ({
        "@type": "MenuSection",
        name: section.name,
        description: section.description || '', // 可选字段
        image: section.image || undefined, // 从 Frontmatter 中获取图像链接
        hasMenuItem: section.hasMenuItem
          .filter(item => item.name && item.description && item.price)
          .map(item => ({
            "@type": "MenuItem",
            name: item.name,
            description: item.description,
            
            offers: {
              "@type": "Offer",
              priceCurrency: "USD",
              price: item.price
            },
            image: item.image || undefined // 从 Frontmatter 中获取图像链接
          }))
      }))
  };
}




  return JSON.stringify(structuredData, null, 2);
};

const structuredData = generateStructuredData({
  name: content?.seo?.name,
  images: content?.seo?.images,
  address: content?.seo?.address,
  review: content?.seo?.review,
  geo: content?.seo?.geo,
  url: content?.seo?.url,
  telephone: content?.seo?.telephone,
  servesCuisine: content?.seo?.servesCuisine,
  priceRange: content?.seo?.priceRange,
  openingHours: content?.seo?.openingHours?.length ? content?.seo.openingHours : undefined,
  menu: content?.seo?.menu,
  acceptsReservations: content?.seo?.acceptsReservations,
  hasMenu: content?.seo?.hasMenu,
  starRating: content?.seo?.starRating,
  currenciesAccepted: content?.seo?.currenciesAccepted,
  paymentAccepted: content?.seo?.paymentAccepted,
  hasMenuSection: content?.seo?.hasMenuSection,
});

---

<html lang={content?.seo?.locale}>
  <head>
    <!-- Google Tag Manager -->
     {tag?
    <script is:inline define:vars={{ tag }}>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", tag);
    </script>:null}
    <!-- End Google Tag Manager -->
    <!-- modal -->
     {isModal?
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const modal = document.getElementById("promoModal");
        const overlay = document.getElementById("overlay");
        const closeModal = document.getElementById("closeModal");
        const promoButton = document.getElementById("promoButton");

        // Check the modal status in localStorage
        const modalStatus = localStorage.getItem("promoModalShown");
        const now = new Date().getTime();

        if (!modalStatus || now - parseInt(modalStatus) > 30 * 60 * 1000) {
          // Show the modal and overlay after a 3-second delay
          setTimeout(() => {
            modal?.classList.add("show");
            overlay?.classList.add("show");
          }, 3000);
        }

        function closeModalAndRecord() {
          modal?.classList.remove("show");
          overlay?.classList.remove("show");
          localStorage.setItem(
            "promoModalShown",
            new Date().getTime().toString()
          );
        }

        closeModal?.addEventListener("click", closeModalAndRecord);
        overlay?.addEventListener("click", closeModalAndRecord);

        // stop bounce
        promoButton?.addEventListener("mouseover", () => {
          promoButton?.classList.remove("bounce");
        });

        // recover bounce
        promoButton?.addEventListener("mouseout", () => {
          promoButton?.classList.add("bounce");
        });
      });
    </script>:null}
    <!-- end of modal -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    {
      content?.seo?.metaTitle ? (
        <title>{content?.seo?.metaTitle}</title>
      ) : (
        <title>{content?.title}</title>
      )
    }
    {
      content?.seo?.metaDescription ? (
        <meta name="description" content={content?.seo?.metaDescription} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.keywords ? (
        <meta name="keywords" content={content?.seo?.keywords} />
      ) : (
        ""
      )
    }
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Best Food Today" />

    <!-- Open Graph Meta Tags -->
    {
      content?.title ? (
        <meta property="og:title" content={content?.seo?.metaTitle?content?.seo?.metaTitle:content?.title} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.metaDescription ? (
        <meta property="og:description" content={content?.seo?.metaDescription} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.img ? (
        <meta property="og:image" content={content?.seo?.img} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.thisPageUrl ? (
        <meta property="og:url" content={content?.seo?.thisPageUrl} />
      ) : (
        ""
      )
    }
    <meta property="og:type" content="restaurant" />
    {content?.seo?.locale?
    <meta property="og:locale" content={content?.seo?.locale}/>:""}

    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    {
      content?.title ? (
        <meta name="twitter:title" content={content?.title} />
      ) : (
        ""
      )
    }
    {
      content?.seo?.metaDescription ? (
        <meta
          name="twitter:description"
          content={content?.seo?.metaDescription}
        />
      ) : (
        ""
      )
    }
    {
      content?.seo?.img ? (
        <meta name="twitter:image" content={content?.seo?.img} />
      ) : (
        ""
      )
    }
    <!-- structured data -->
    {structuredData && (
      <script type="application/ld+json" set:html={structuredData}></script>
    )}
        <!-- end of structured data -->
  </head>
  <body>
    <!-- Google Tag Manager (noscript) -->
     {tag?
    <noscript
      ><iframe
        src={`https://www.googletagmanager.com/ns.html?id=${content.tag}`}
        height="0"
        width="0"
        style="display:none;visibility:hidden"></iframe></noscript>
        :null}

    <!-- End Google Tag Manager (noscript) -->

    {content?.header && <Header content={content} />}

    {
      content?.sections?.map((section: { type: string }) => {
        if (section?.type === "feature" || section?.type === "hero") {
          return <Feature content={content} section={section} />;
        } else if (section?.type === "video") {
          return <Video content={content} section={section} />;
        } else if (section?.type === "gallery") {
          return <Gallery section={section} />;
        } else if (section?.type === "modal") {
          return <Modal content={content} section={section} />;
        } else if (section?.type === "map") {
          return <Map content={content} section={section} />;
        } else if (section?.type === "form") {
          return <GoogleForm content={content} section={section} />;
        } else if (section?.type === "textBlock") {
          return <TextBlock content={content} section={section} />;
        }
      })
    }
    {content?.footer && <Footer content={content} />}

    <GotoTopButton content={content} />
    <slot />


    <!-- GLF page with an embedded order iframe popup.
    <script
      is:inline
      src="https://www.fbgcdn.com/embedder/js/ewm2.js"
      defer
      async></script> -->
  </body>
</html>
